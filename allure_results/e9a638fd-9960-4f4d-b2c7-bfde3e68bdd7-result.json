{"name": "Вопрос № 2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-1\" class=\"accordion__button\"> is not clickable at point (970,122) because another element <img src=\"/assets/scooter.png\"> obscures it\nStacktrace:\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:188:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:287:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:93:31", "trace": "self = <test_questions_and_answers_page.TestQuestionsAnswers object at 0x0000026A61C497F0>\n\n    @allure.title('Вопрос № 2')\n    @allure.description('Получаем текст вопроса, текст ответа и сравниваем их с эталонными')\n    def test_second_question(self):\n    \n    \n        question = QuestionsAnswersPage(self.driver)\n    \n        question.get_base_page()\n        WebDriverWait(self.driver, 15)\n        question.scroll_to_question(2)\n    \n        question_text = question.get_question(2)\n        assert question_text == questions_texts[2], 'Текст вопроса не совпадает!'\n    \n>       question.get_any_answer(2)\n\ntests\\test_questions_and_answers_page.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\questions_answers_page.py:57: in get_any_answer\n    self.driver.find_element(*self.question).click()\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:89: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:773: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026A61C58970>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div id=\\\\\"accordion__headi...dsChild.jsm:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:93:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-1\" class=\"accordion__button\"> is not clickable at point (970,122) because another element <img src=\"/assets/scooter.png\"> obscures it\nE       Stacktrace:\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:188:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:287:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:93:31\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "Получаем текст вопроса, текст ответа и сравниваем их с эталонными", "steps": [{"name": "Открываем страницу https://qa-scooter.praktikum-services.ru/", "status": "passed", "start": 1659813763399, "stop": 1659813763479}, {"name": "Скролим страницу к вопросу", "status": "passed", "parameters": [{"name": "question", "value": "2"}], "start": 1659813763479, "stop": 1659813763479}, {"name": "Получаем текст вопроса и возвращаем его для сравнения", "status": "passed", "parameters": [{"name": "question", "value": "2"}], "start": 1659813763479, "stop": 1659813763490}, {"name": "Клик по тексту вопроса для раскрытия", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div id=\"accordion__heading-1\" class=\"accordion__button\"> is not clickable at point (970,122) because another element <img src=\"/assets/scooter.png\"> obscures it\nStacktrace:\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:188:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.jsm:287:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.js:166:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.js:125:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:93:31\n\n", "trace": "  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Admin\\PycharmProjects\\FinalTaskSprint1\\pythonProject\\sprint4.1\\pages\\questions_answers_page.py\", line 57, in get_any_answer\n    self.driver.find_element(*self.question).click()\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 89, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 773, in _execute\n    return self._parent.execute(command, params)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 430, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "question", "value": "2"}], "start": 1659813763490, "stop": 1659813763495}], "start": 1659813763399, "stop": 1659813763498, "uuid": "42e31b7d-f432-490a-8985-043da8bcf0bc", "historyId": "13e1592673d66bde43aeeb96795bd86d", "testCaseId": "09bb9a468ad249a1ec1ae33c723d301d", "fullName": "tests.test_questions_and_answers_page.TestQuestionsAnswers#test_second_question", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_questions_and_answers_page"}, {"name": "subSuite", "value": "TestQuestionsAnswers"}, {"name": "host", "value": "DESKTOP-UPQ9P6L"}, {"name": "thread", "value": "19212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_questions_and_answers_page"}]}